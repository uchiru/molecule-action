#!/usr/bin/env ruby

class String
  def colorize(color_code); "\e[#{color_code}m#{self}\e[0m"; end
  def red; colorize(31); end
  def green; colorize(32); end
  def light_blue; colorize(36); end
end

def sysexec(cmd)
  puts "[exec] #{cmd}"
  system(cmd)
  abort "ERROR: cmd returned non zero status" unless $?.success?
end

# check repo & prepare
if (out = `git status --porcelain`.strip) != ""
  puts out
  abort "ERROR: ".red + "current repository not commited properly" 
end
sysexec("git pull --rebase && git push")

# read || init major version
config = File.expand_path("../.release", __dir__)
if File.exists?(config)
  major = File.readlines(config).map(&:strip).find { |s| s =~ /^major=/ }.split("=").last.to_i
else
  puts ""
  puts "WARNING: ".light_blue + "please create .release file with 'major=0' content"
  major = 0
end

# calc version
branch = `git symbolic-ref --short -q HEAD`.strip
hash = `git rev-parse --verify HEAD`.strip
if branch == 'master'
  versions = `git ls-remote --tags -q`.strip.split("\n").map { |s|
    s.split.last.sub("refs/tags/", "")
  }.select { |s|
    s =~ /^v#{major}.\d+?$/
  }.map { |s|
    s.split(".").last.to_i
  }.sort
  version = "v#{major}.#{(versions.last || 0) + 1}"
else
  desc = branch.split(//).map { |c| c =~ /^[A-Za-z0-9]$/ ? c : "-" }[0..30].join
  version = "dev-#{desc}-#{hash[0..7]}"
end

# release
print "\nTag this version as: #{version.green} (y/n) > "
input = STDIN.gets.strip
if input == "y" || input == 'yes'
  puts ""
  sysexec("git tag #{version} && git push --tags")
else
  abort "ERROR: releasing aborted by user"
end

# publish
if File.exists?(File.join(__dir__, "publish"))
  sysexec(File.join(__dir__, "publish") + " #{version}")
end

puts "Done."
